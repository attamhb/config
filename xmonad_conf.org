#+TITLE: Xmonad Config
#+PROPERTY: header-args :tangle ~/.xmonad/xmonad.hs
#+STARTUP: showeverything
#+AUTHOR: ATTA

* Imports
#+BEGIN_SRC haskell
import XMonad
import Data.Monoid
import System.Exit
import XMonad.Util.EZConfig
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run
import XMonad.Util.SpawnOnce
import qualified XMonad.StackSet as W
import qualified Data.Map        as M
import XMonad.Layout.Reflect (reflectHoriz)
import Control.Monad
import XMonad.Actions.SpawnOn
#+END_SRC

** New


#+BEGIN_SRC haskell
import XMonad.Layout.Spacing
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)

#+END_SRC


* Defaults

#+BEGIN_SRC haskell
myTerminal      = "alacritty"
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True
myClickJustFocuses :: Bool
myClickJustFocuses = False
myBorderWidth   = 0
myModMask       = mod4Mask
myWorkspaces    = ["1","2","3","4","5","6","7","8","9", "0"]
--myWorkspaces    = ["1","2","3","4","5"]
myNormalBorderColor  = "#8f8b7f" --"#42f5e6"
myFocusedBorderColor = "#00bfff" -- "#ff0000"
    ------------------------------------------------------------------------
#+END_SRC



* myKeys

#+BEGIN_SRC haskell
  myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $
      [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)
      , ((modm,               xK_p     ), spawn "dmenu_run")
      , ((modm .|. shiftMask, xK_p     ), spawn "j4-dmenu-desktop")
  --------------------------------------------------------------------
      , ((modm .|. shiftMask, xK_h     ), spawn "alacritty")
      --, ((modm .|. shiftMask, xK_x     ), spawn "lxappearance")
      --, ((modm .|. shiftMask, xK_v     ), spawn "thunderbird")
      , ((modm .|. shiftMask, xK_f     ), spawn "thunar")
      --, ((modm .|. shiftMask, xK_z     ), spawn "zoom")
      , ((modm .|. shiftMask, xK_s     ), spawn "inkscape")
      , ((modm .|. shiftMask, xK_a     ), spawn "gnome-calendar")
      , ((modm .|. shiftMask, xK_g     ), spawn "chromium --kiosk")
      --, ((modm .|. shiftMask, xK_b     ), spawn "xmobar -x ~/.xmonad/xmobarrc")
      , ((modm,               xK_b     ), spawn "pkill xmobar")
      , ((modm,               xK_g     ), spawn "brave --kiosk")
      , ((modm,               xK_d     ), spawn "emacs")
      , ((modm,               xK_v     ), spawn "virtualbox")
      , ((modm,               xK_o     ), spawn "blueman-manager")
      , ((modm .|. shiftMask, xK_o     ), spawn "pavucontrol")
      , ((modm,               xK_y     ), spawn "nitrogen")
      , ((modm .|. shiftMask, xK_y     ), spawn "arandr")
      , ((modm,               xK_i     ), spawn "gimp")
      , ((modm,               xK_x     ), spawn "flameshot gui")
      , ((modm .|. shiftMask, xK_b     ), spawn "trayer --edge top --align right --SetDockType true --SetPartialStrut true --expand true --width 10 --transparent true --tint 0x191970 --height 18; nm-applet &")
      , ((modm .|. shiftMask, xK_c     ), kill)
      , ((modm,               xK_space ), sendMessage NextLayout)
      , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)
      -- Resize viewed windows to the correct size
      , ((modm,               xK_n     ), refresh)
      , ((modm,               xK_Tab   ), windows W.focusDown)
      , ((modm,               xK_j     ), windows W.focusDown)
      , ((modm,               xK_k     ), windows W.focusUp  )
      -- Move focus to the master window
      , ((modm,               xK_m     ), windows W.focusMaster  )
      , ((modm,               xK_Return), windows W.swapMaster)
      , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )
      , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )
      , ((modm,               xK_h     ), sendMessage Shrink)
      , ((modm,               xK_l     ), sendMessage Expand)
      , ((modm,               xK_t     ), withFocused $ windows . W.sink)
      , ((modm              , xK_comma ), sendMessage (IncMasterN 1))
      , ((modm              , xK_period), sendMessage (IncMasterN (-1)))

      -- See also the statusBar function from Hooks.DynamicLog.
      --, ((modm, xK_b     ), sendMessage ToggleStruts)

      -- Quit xmonad
      , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))

      -- Restart xmonad
      , ((modm              , xK_q     ), spawn "xmonad --recompile; xmonad --restart")

      -- Run xmessage with a summary of the default keybindings (useful for beginners)
      , ((modm .|. shiftMask, xK_slash ), spawn ("echo \"" ++ help ++ "\" | xmessage -file -"))
      ]
      ++

      --
      -- mod-[1..9], Switch to workspace N
      -- mod-shift-[1..9], Move client to workspace N
      --
      [((m .|. modm, k), windows $ f i)
          | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
          , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
      ++


      -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
      -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3

      [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
          | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
          , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]


#+END_SRC


* myMouseBindings

#+BEGIN_SRC haskell
-- Mouse bindings: default actions bound to mouse events
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]

#+END_SRC


* myLayout

#+BEGIN_SRC haskell
myLayout = avoidStruts (tiled ||| Mirror tiled ||| Full)
  where
     -- default tiling algorithm partitions the screen into two panes
     -- tiled   = Tall nmaster delta ratio
     tiled   = reflectHoriz $ Tall nmaster delta ratio

     -- The default number of windows in the master pane
     nmaster = 1

     -- Default proportion of screen occupied by master pane
     ratio   = 3/5

     -- Percent of screen to increment by when resizing panes
     delta   = 1/100

------------------------------------------------------------------------
-- Window rules:

-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
--
#+END_SRC


* myManageHook

#+BEGIN_SRC haskell
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "alacritty"      --> doShift "4:TERMUX"
    , className =? "Gimp"           --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore ]

------------------------------------------------------------------------
-- Event handling

-- * EwmhDesktops users should change this to ewmhDesktopsEventHook
--
-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
#+END_SRC


* myEventHook

#+BEGIN_SRC haskell
myEventHook = mempty

------------------------------------------------------------------------
-- Status bars and logging

-- Perform an arbitrary action on each internal state change or X event.
-- See the 'XMonad.Hooks.DynamicLog' extension for examples.
--
myLogHook = return ()
myMonitor = "xrandr --output HDMI-A-0 --mode 2560x1440 --pos 2560x0 --rotate normal --output DisplayPort-0 --mode 2560x1440 --pos 0x0 --rotate normal"
-- myMonitor = "xrandr --output eDP-1 --primary --mode 1920x1080 --pos 5120x360 --rotate normal --output HDMI-1 --mode 2560x1440 --pos 2560x0 --rotate normal --output DP-1 --mode 2560x1440 --pos 0x0 --rotate normal &"
------------------------------------------------------------------------
-- Startup hook

-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
-- myStartupHook = return ()
#+END_SRC


* myStartupHook

#+BEGIN_SRC haskell
myStartupHook = do
           spawnOnce "picom &"
           spawnOnce "nitrogen --restore &"
           spawnOnce myMonitor
           -- spawnOnce "trayer --edge top --align right --SetDockType true --SetPartialStrut true --expand true --widthtype request --height 18 --monitor primary &"
           -- spawnOnce "trayer --edge top --align right --SetDockType true --SetPartialStrut true --expand true --widthtype request --height 18 --monitor 1 &"
           -- spawnOnce "trayer --edge top --align right --SetDockType true --SetPartialStrut true --expand true --widthtype request --height 18 --monitor 2 &"
           spawnOnce "nm-applet &"
           spawnOnce "volumeicon &"
           spawnOnce "dropbox start &"
#+END_SRC


* main

#+BEGIN_SRC haskell
-- Now run xmonad with all the defaults we set up.

-- Run xmonad with the settings you specify. No need to modify this.
--
-- main = xmonad defaults
main = do
  xmproc <- spawnPipe "xmobar -x 0 ~/.xmonad/xmobarrc"
  xmproc <- spawnPipe "xmobar -x 2 ~/.xmonad/xmobarrc"
  xmproc <- spawnPipe "xmobar -x 1 ~/.xmonad/xmobarrc"
  xmonad $ docks defaults

#+END_SRC


* Default Definitions

#+BEGIN_SRC haskell
defaults = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        clickJustFocuses   = myClickJustFocuses,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = spacingWithEdge 0 $ myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }
-------------------------------------------------------------------------------
#+END_SRC


* Help

#+BEGIN_SRC haskell
------------------------------------------------------------------------------
-- | Finally, a copy of the default bindings in simple textual tabular format.
help :: String
help = unlines ["The default modifier key is 'alt'. Default keybindings:",
    "",
    "-- launching and killing programs",
    "mod-Shift-Enter  Launch xterminal",
    "mod-p            Launch dmenu",
    "mod-Shift-p      Launch j4-dmenu-desktop",
    "mod-Shift-c      Close/kill the focused window",
    "mod-Space        Rotate through the available layout algorithms",
    "mod-Shift-Space  Reset the layouts on the current workSpace to default",
    "mod-n            Resize/refresh viewed windows to the correct size",
    "",
    "-- move focus up or down the window stack",
    "mod-Tab        Move focus to the next window",
    "mod-Shift-Tab  Move focus to the previous window",
    "mod-j          Move focus to the next window",
    "mod-k          Move focus to the previous window",
    "mod-m          Move focus to the master window",
    "",
    "-- modifying the window order",
    "mod-Return   Swap the focused window and the master window",
    "mod-Shift-j  Swap the focused window with the next window",
    "mod-Shift-k  Swap the focused window with the previous window",
    "",
    "-- resizing the master/slave ratio",
    "mod-h  Shrink the master area",
    "mod-l  Expand the master area",
    "",
    "-- floating layer support",
    "mod-t  Push window back into tiling; unfloat and re-tile it",
    "",
    "-- increase or decrease number of windows in the master area",
    "mod-comma  (mod-,)   Increment the number of windows in the master area",
    "mod-period (mod-.)   Deincrement the number of windows in the master area",
    "",
    "-- quit, or restart",
    "mod-Shift-q  Quit xmonad",
    "mod-q        Restart xmonad",
    "mod-[1..9]   Switch to workSpace N",
    "",
    "-- Workspaces & screens",
    "mod-Shift-[1..9]   Move client to workspace N",
    "mod-{w,e,r}        Switch to physical/Xinerama screens 1, 2, or 3",
    "mod-Shift-{w,e,r}  Move client to screen 1, 2, or 3",
    "",
    "-- Mouse bindings: default actions bound to mouse events",
    "mod-button1  Set the window to floating mode and move by dragging",
    "mod-button2  Raise the window to the top of the stack",
    "mod-button3  Set the window to floating mode and resize by dragging"]

#+END_SRC

#+TITLE: MY EMACS Configuration
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
#+STARTUP: showeverything
#+AUTHOR: ATTA


* Initialization and Configuration

#+BEGIN_SRC elisp
(require 'server)
(or (server-running-p)
    (server-start))
  (setq gc-cons-threshold (* 100 1000 1000))
#+END_SRC


** Package Archives Configuration and  Use-Package Initialization

#+BEGIN_SRC elisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  (require 'package)
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (setq gc-cons-threshold (* 50 1000 1000))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure 't)
#+END_SRC

* Appearance Configuration

** Text Display and UI Elements Control
#+BEGIN_SRC elisp
  (set-face-attribute 'default nil
                          :font "Fira Code Retina"
                          :height 170)
  (setq inhibit-startup-message t
        initial-major-mode 'org-mode
        initial-buffer-choice "~/Dropbox/SCRATCH.org"
        display-line-numbers-type 'relative
        use-dialog-box nil
        use-dialog-box nil
        history-length 25
        ring-bell-function 'ignore
        dired-dwim-target t
        delete-by-moving-to-trash t
        dired-listing-switches "-agho --group-directories-first"
        image-dired-external-viewer "/usr/bin/gimp")
      (global-display-fill-column-indicator-mode 0)
      (global-display-line-numbers-mode t)
      (line-number-mode 1)
      (column-number-mode 0)
      (electric-pair-mode  1)
      (tooltip-mode 0)
      (tool-bar-mode 0)
      (scroll-bar-mode 0)
      (blink-cursor-mode 0)
      (set-fringe-mode 0)
      (recentf-mode 1)
      (display-time-mode 1)
      (savehist-mode 1)
      (save-place-mode 1)
      (global-auto-revert-mode 1)
      (menu-bar-mode 0)
      (put 'dired-find-alternate-file 'disabled nil)
      (setq-default fill-column 80)
      (setq-default line-spacing 2)
(setq large-file-warning-threshold nil)

#+END_SRC

** Theme and Modeline

#+BEGIN_SRC   elisp
(use-package doom-themes
  :init
  (load-theme 'doom-palenight t))
(use-package beacon
  :diminish
  :config
  (beacon-mode 1))
(use-package nerd-icons
  :defer t)
(use-package doom-modeline
  :init
  (doom-modeline-mode 1))
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
#+BEGIN_SRC elisp
  #+END_SRC


** Backup Settings
#+BEGIN_SRC elisp
(make-directory
 (expand-file-name "backups/" user-emacs-directory) t)
(setq backup-directory-alist `(("." . ,(expand-file-name "backups/" user-emacs-directory)))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+END_SRC

** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-banner-logo-title "In Mathematics, You Don't Understand Things! You Just Get Used To Them! (John von Nuemann)")
    (dashboard-center-content t)
    (dashboard-items '((agenda)
                       (projects . 5)))
    (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    (dashboard-set-file-icons t)
    (dashboard-set-footer nil)
    (dashboard-set-heading-icons t)
    (dashboard-set-navigator t)
    (dashboard-startup-banner 'logo)
    :config (dashboard-setup-startup-hook))
(setq dashboard-set-init-info nil)
#+end_src

** Color Display in Text

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :delight
    :hook ((prog-mode text-mode) . rainbow-mode))
#+end_src

** Parentheses

#+begin_src emacs-lisp
  (use-package faces
    :ensure nil
    :custom (show-paren-delay 0)
    :config
    (set-face-background 'show-paren-match "#161719")
    (set-face-bold 'show-paren-match t)
    (set-face-foreground 'show-paren-match "#ffffff"))
#+end_src


#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src


#+begin_src emacs-lisp
  (use-package smartparens
    :delight
    :hook (prog-mode . smartparens-mode)
    :bind (("M-'" . sp-backward-sexp)
           ("M-\\" . sp-forward-sexp)
           ("M-(" . sp-wrap-round)
           ("M-[" . sp-wrap-curly))
    :custom (sp-escape-quotes-after-insert nil))
#+end_src

** Window

#+begin_src emacs-lisp
(use-package window
    :ensure nil
    :bind (("C-x 2" . vsplit-last-buffer)
           ("C-x 3" . hsplit-last-buffer)
           ;; Don't ask before killing a buffer.
           ([remap kill-buffer] . kill-this-buffer))
    :preface
    (defun hsplit-last-buffer ()
      "Focus to the last created horizontal window."
      (interactive)
      (split-window-horizontally)
      (other-window 1))

    (defun vsplit-last-buffer ()
      "Focus to the last created vertical window."
      (interactive)
      (split-window-vertically)
      (other-window 1)))

(use-package centered-window
      :custom
      (cwm-centered-window-width 130)
      (cwm-frame-internal-border 0)
      (cwm-incremental-padding t)
      (cwm-incremental-padding-% 2)
      (cwm-left-fringe-ratio 0)
      (cwm-use-vertical-padding t)
      :config (centered-window-mode))

(use-package switch-window
    :bind (("C-x o" . switch-window)
           ("C-x w" . switch-window-then-swap-buffer)))

(use-package winner
    :ensure nil
    :config (winner-mode))

#+end_src

** Dired Mode

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :delight "Dired"
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-listing-switches "-alh --group-directories-first")
    (dired-ls-F-marks-symlinks nil)
    (dired-recursive-copies 'always))
#+end_src


#+begin_src emacs-lisp
  (use-package dired-single
    :after dired
    :bind (:map dired-mode-map
                ([remap dired-find-file] . dired-single-buffer)
                ([remap dired-up-directory] . dired-single-up-directory)
                ("M-DEL" . dired-prev-subdir)))
#+end_src


#+begin_src emacs-lisp
  (use-package dired-open
    :after (dired dired-jump)
    :custom (dired-open-extensions '(("mp4" . "mpv"))))

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind (:map dired-mode-map
                ("H" . dired-hide-dotfiles-mode)))

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)))
  (use-package dired-narrow
    :ensure nil
    :bind (("C-c C-n" . dired-narrow)
           ("C-c C-f" . dired-narrow-fuzzy)))
#+end_src

** Emojify
#+BEGIN_SRC elisp
(use-package emojify
  :after erc
  :config
  (global-emojify-mode))
#+END_SRC


#+BEGIN_SRC elisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
(setq make-backup-files nil)
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
          auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
(setq create-lockfiles nil)
(setq projectile-known-projects-file
        (expand-file-name "tmp/projectile-bookmarks.eld" user-emacs-directory)
        lsp-session-file (expand-file-name "tmp/.lsp-session-v1" user-emacs-directory))
(setq user-emacs-directory (expand-file-name "~/.cache/emacs"))
(use-package no-littering)
#+END_SRC

* Advanced Configuration
** Browser

#+begin_src emacs-lisp
  (use-package browse-url
    :ensure nil
    :custom
    (browse-url-browser-function 'browse-url-generic)
    (browse-url-generic-program "brave"))
#+end_src

** Calendar

#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :bind ("C-c 0" . calendar)
    :custom
    (calendar-mark-holidays-flag t)
    (calendar-week-start-day 1))
#+end_src


#+begin_src emacs-lisp
  (use-package holidays
    :ensure nil
    :custom
    (holiday-general-holidays
     '((holiday-fixed 1 1 "New Year's Day")
       (holiday-fixed 2 14 "Valentine's Day")
       (holiday-fixed 10 31 "Halloween")
       (holiday-fixed 11 11 "Armistice of 1918")))
    (holiday-local-holidays
     '((holiday-fixed 5 1 "Labor Day")
       (holiday-fixed 12 12 "hh"))))
#+end_src

** Documentation

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-at-point
               helpful-callable
               helpful-command
               helpful-function
               helpful-key
               helpful-macro
               helpful-variable)
    :bind
    ([remap display-local-help] . helpful-at-point)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src

** Editorconfig

#+begin_src emacs-lisp
  (use-package editorconfig
    :defer 0.3
    :config (editorconfig-mode))
#+end_src

** History

#+begin_src emacs-lisp
  (use-package solaire-mode
    :defer 0.1
    :custom (solaire-mode-remap-fringe t)
    :config (solaire-global-mode))
#+end_src


#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+end_src

** Package Menu

#+begin_src emacs-lisp
  (use-package paradox)
#+end_src

** Paste

#+begin_src emacs-lisp
  (use-package webpaste
    :defer 0.4
    :bind (("C-c C-p C-b" . webpaste-paste-buffer)
           ("C-c C-p C-p" . webpaste-paste-buffer-or-region)
           ("C-c C-p C-r" . webpaste-paste-region))
    :custom (webpaste-provider-priority '("dpaste.org" "dpaste.com" "ix.io")))
#+end_src


#+begin_src emacs-lisp
  (use-package imgbb
    :commands imgbb-upload
    :bind ("C-c C-p C-i" . imgbb-upload))
#+end_src

** Spaces Around the Operators
#+begin_src emacs-lisp
  (use-package electric-operator
    :hook ((css-mode java-mode js2-mode
                    python-mode sql-mode typescript-mode) . electric-operator-mode))
#+end_src

** Term Definitions

#+begin_src emacs-lisp
  (use-package wiki-summary
    :commands (wiki-summary wiki-summary-insert)
    :preface
    (defun my/format-summary-in-buffer (summary)
      (let ((buf (generate-new-buffer "*wiki-summary*")))
        (with-current-buffer buf
          (princ summary buf)
          (fill-paragraph)
          (goto-char (point-min))
          (view-mode))
        (pop-to-buffer buf)))
    :config
    (advice-add 'wiki-summary/format-summary-in-buffer
                :override #'my/format-summary-in-buffer))
#+end_src

** Whitespaces and Kill


#+begin_src emacs-lisp
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :preface
    (defun my/kill-region-or-line ()
      (interactive)
      (if current-prefix-arg
          (progn
            (kill-new (buffer-string))
            (delete-region (point-min) (point-max)))
        (progn (if (use-region-p)
                   (kill-region (region-beginning) (region-end) t)
                 (kill-region (line-beginning-position) (line-beginning-position
                                                         2))))))
    :hook ((before-save . delete-trailing-whitespace)
           ((prog-mode text-mode) . turn-on-auto-fill))
    :bind ("C-w" . my/kill-region-or-line)
    :custom (set-mark-command-repeat-pop t))
#+end_src


#+begin_src emacs-lisp
  (use-package hungry-delete
    :defer 0.7
    :delight
    :config (global-hungry-delete-mode))
#+end_src

** Windows

#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode)
    :bind (:map vertico-map
                ("C-<backspace>" . vertico-directory-up))
    :custom (vertico-cycle t)
    :custom-face (vertico-current ((t (:background "#1d1f21")))))
#+end_src

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init (marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-styles '(orderless)))
#+end_src

#+begin_src emacs-lisp
  (use-package embark
    :bind ("C-." . embark-act))
#+end_src

** Fly Spell

#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :delight
    :hook ((text-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode))
    :custom
    ;; Add correction to abbreviation table.
    (flyspell-abbrev-p t)
    (flyspell-default-dictionary "en_US")
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil))
#+end_src

** Spell Checker

#+begin_src emacs-lisp
  (use-package ispell)
#+end_src

** Grammar Checker

#+begin_src emacs-lisp
  (use-package lsp-ltex
    :disabled
    :custom
    (lsp-ltex-enabled nil)
    (lsp-ltex-mother-tongue "fr"))
#+end_src

** Spelling Configuration

#+BEGIN_SRC elisp
(use-package sly)
(use-package no-littering
  :diminish
  :defer t)
  (setq ispell-dictionary "english")
#+END_SRC

** Auto Complete
#+BEGIN_SRC elisp
(use-package auto-complete
  :diminish
  :config
  (auto-complete-mode 1))
#+END_SRC

** Parentheses Highlighting
#+BEGIN_SRC elisp
(use-package paren
  :diminish
  :config (show-paren-mode))
#+END_SRC

** Eldoc
#+BEGIN_SRC elisp
(use-package eldoc
  :defer t
  :config (global-eldoc-mode))
#+END_SRC

** Paredit
#+BEGIN_SRC elisp
(use-package paredit
  :demand t
  :bind
  (:map paredit-mode-map
        ("M-s" . nil))
  :config
  (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode))
#+END_SRC

** Ivy and Related Packages
#+BEGIN_SRC elisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :diminish ivy-mode
  :diminish counsel-mode
  :bind (("C-s" . swiper)
         ("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :init
  (ivy-mode 1)
  (counsel-mode 1)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t))

(use-package ivy-prescient
  :after counsel
  :init
  (ivy-prescient-mode)
  (prescient-persist-mode))

(use-package prescient
  :defer 0
  :diminish
  :config)
#+END_SRC

** Helpful
#+BEGIN_SRC elisp
(use-package helpful
  :defer t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC

** Code Formatting
#+begin_src elisp
(use-package blacken
  :defer t
  :hook (python-mode . blacken-mode)
  :init
  (setq-default blacken-fast-unsafe nil)
  (setq-default blacken-line-length 79))
#+end_src

** Autocompletion with Company
#+begin_src elisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
  (use-package company-box
    :hook (company-mode . company-box-mode))
  (use-package company-box
    :if (display-graphic-p)
    :after company
    :hook (company-mode . company-box-mode))
  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1)
    (prescient-persist-mode))
  (global-company-mode)
#+end_src

** Project Navigation with Projectile
#+begin_src elisp
(use-package projectile
        :diminish projectile-mode
        :config (projectile-mode)
        :custom
        ((projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    (projectile-keymap-prefix (kbd "C-c C-p"))
    (projectile-mode-line '(:eval (projectile-project-name)))
    (projectile-project-search-path '("~/.local/share/git"))
    (projectile-switch-project-action #'projectile-dired))
        :bind-keymap
        ("C-c p" . projectile-command-map)
        :init
        (when (file-directory-p "~/Dropbox/Projects/Code")
          (setq projectile-project-search-path '("~/Dropbox/Projects/Code")))
        (setq projectile-switch-project-action #'projectile-dired))

  (use-package consult-projectile
    :after (consult projectile)
    :commands (consult-projectile))

(use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    :hook (ibuffer . my/ibuffer-projectile))

#+end_src

** Spell Checking with Flyspell
#+begin_src elisp
(use-package flyspell
   :config
   (setq ispell-program-name "hunspell"
          ispell-default-dictionary "en_US")
   :hook (text-mode . flyspell-mode)
   :bind (("M-<f7>" . flyspell-buffer))
          ("<f7>" . flyspell-word)
          ("C-;" . flyspell-auto-correct-previous-word))
#+end_src

** Deft
#+begin_src elisp
(use-package deft
  :config
  (setq deft-directory org-directory
        deft-recursive t
        deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
        deft-use-filename-as-title t)
  :bind
  ("C-c n d" . deft))
#+end_src

** Eldoc Configuration
#+begin_src elisp
(use-package eldoc
  :diminish eldoc-mode)
#+end_src

** Syntax Checking with Flycheck
#+begin_src elisp
(use-package flycheck
  :diminish flycheck-mode
  :init
  (setq flycheck-check-syntax-automatically '(save new-line)
        flycheck-idle-change-delay 5.0
        flycheck-display-errors-delay 0.9
        flycheck-highlighting-mode 'symbols
        flycheck-indication-mode 'left-fringe
        flycheck-standard-error-navigation t
        flycheck-deferred-syntax-check nil))
#+end_src

** Snippets with Yasnippet
#+begin_src elisp
  (use-package yasnippet
    :ensure t
    :diminish
    :config
    (use-package yasnippet-snippets)
    (setq yas-snippet-dirs '("~/Dropbox/config/emacs_snippets/"))
    (yas-reload-all)
    (yas-global-mode 1))

  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
#+end_src

** Text Editing Enhancements
#+begin_src elisp
(add-hook 'text-mode-hook 'visual-line-mode) ;; Sensible line breaking
(delete-selection-mode t) ;; Overwrite selected text
(setq scroll-error-top-bottom t)
#+end_src

** Aggressive Indent
#+BEGIN_SRC elisp
  (use-package aggressive-indent
    :diminish
    :hook
    (emacs-lisp-mode . aggressive-indent-mode)
    (pthon-mode . aggressive-indent-mode))
#+END_SRC

** Minions
#+BEGIN_SRC elisp
(use-package minions
  :custom
  (minions-mode 1))
#+END_SRC

** CSV Mode
#+BEGIN_SRC elisp
(use-package csv-mode
  :mode "\\.csv\\'"
  :preface
  (defun csv-remove-commas ()
    (interactive)
    (goto-char (point-min))
    (while (re-search-forward "\"\\([^\"]+\\)\"" nil t)
      (replace-match (replace-regexp-in-string "," "" (match-string 1))))))
#+END_SRC

** Focus
#+BEGIN_SRC elisp
(use-package focus)
#+END_SRC

** Term
#+BEGIN_SRC elisp
(use-package term
  :defer t
  :config
  (setq explicit-shell-file-name "bash")
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+END_SRC

** Vterm
#+BEGIN_SRC elisp
(use-package vterm
  :defer t
  :config
  (setq explicit-shell-file-name "bash")
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+END_SRC

** Terminal Modes Line Numbers Configuration
#+BEGIN_SRC elisp
(dolist (mode '(term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                vterm-mode-hook
                pdf-view-mode-hook
                treemacs-mode-hook))
  (add-hook mode (lambda ()
                   (display-line-numbers-mode -1))))
#+END_SRC

* Evil Mode
#+BEGIN_SRC elisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

(use-package undo-tree
  :ensure t
  :after evil
  :diminish
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))
#+END_SRC


* Keybindings

** Which Key
#+BEGIN_SRC elisp
(use-package which-key
  :init
  :config
  (which-key-mode)
  (setq which-key-idle-dely 0.5)
  (which-key-setup-minibuffer))
#+END_SRC


** General Keybindings
#+BEGIN_SRC elisp
  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (rune/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))
#+END_SRC


** Text Scale Hydra
#+BEGIN_SRC elisp
(defhydra hydra-text-scale (:timeout 4)
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+END_SRC


** Global Key Bindings
#+BEGIN_SRC elisp
  (global-set-key (kbd "C-c t") 'toggle-transparency)
  (global-set-key (kbd "<f1>") (lambda() (interactive) (find-file "~/Dropbox/mat265/")))
  (global-set-key (kbd "<f3>") (lambda() (interactive) (find-file "~/Dropbox/config/")))
  (global-set-key (kbd "<f4>") (lambda() (interactive) (find-file "~/Dropbox/research/clustering_particles/density_estimation")))
  (global-set-key (kbd "<f5>") (lambda() (interactive) (find-file "~/Dropbox/projects/")))
(global-set-key (kbd "C-c luf") (lambda () (interactive) (load-file "~/.emacs.d/init.el")))

#+END_SRC

** Leader Key Bindings
#+BEGIN_SRC elisp
  (rune/leader-keys
    "sq" '(sql-postgres :which-key "sql-postgres")
    "ww" '(evil-window-next :which-key "evil-window-next")
    "mm" '(markdown-mode :which-key "markdown-mode")
    "mv" '(markdown-view-mode :which-key "markdown-view-mode")
    "ts" '(hydra-text-scale/body :which-key "scale text")
    "cc" '(TeX-command-run-all :which-key "Tex-command-run-all")
    "cb" '(kill-this-buffer :which-key "kill-this-buffer")
    "cn" '(global-display-line-numbers-mode :which-key "global-display-number-mode")
    "tm" '(vterm :which-key "vterm")
    "ss" '(sly :which-key "sly")
    "cl" '(global-display-fill-column-indicator-mode :which-key "global-display-fill-column-indicator-mode")
    "bm" '(blacken-mode :which-key "blacken-mode")
    "tc" '(TeX-clean :which-key "TeX-clean")
    "lb" '(list-buffers :which-key "list-buffers")
    "tp" '(transparency :which-key "transparency")
    "bf" '(eval-buffer :which-key "eval-buffer")
    "yns" '(yas-new-snippet :which-key "yas-new-snippet")
    "ohs" '(org-hide-src-block-delimiters :which-key "org-hide-src-block-delimiters")
    "obt" '(org-babel-tangle :which-key "org-babel-tangle")
    "trm" '(treemacs :which-key "treemacs")
    )
#+END_SRC

* User-defined Functions

** Startup Time Display Function

#+BEGIN_SRC elisp
(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))
(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC

** TRANSPARENCY

#+BEGIN_SRC   elisp
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha))) 95)
           '(95 . 95) '(100 . 100)))))
(defun transparency (value)
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))

(transparency 95)

;;(add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+END_SRC


#+BEGIN_SRC elisp

(defun efs/org-font-setup ()
        (font-lock-add-keywords 'org-mode
                                '(("^ *\\([-]\\) "
                                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

      (let ((background-color (face-attribute 'default :background)))
        (set-face-attribute 'org-block-begin-line nil
                            :foreground background-color
                            :background background-color)
        (set-face-attribute 'org-block-end-line nil
                            :foreground background-color
                            :background background-color))

        ;; Set faces for heading levels
        (dolist (face '((org-level-1 . 1.2)
                        (org-level-2 . 1.1)
                        (org-level-3 . 1.05)
                        (org-level-4 . 1.0)
                        (org-level-5 . 1.1)
                        (org-level-6 . 1.1)
                        (org-level-7 . 1.1)
                        (org-level-8 . 1.1)))
          (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

        (set-face-attribute 'org-block nil
                            :foreground nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  #+END_SRC

* Org Mode
** Basic Org Mode Setup

#+begin_src elisp
(use-package org)

(setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
       ;; org-image-actual-width '(200)
        )
#+END_src elisp

** Org-Appear

#+begin_src elisp
    (use-package org-appear
      :hook (org-mode . org-appear-mode))
#+END_src elisp

** Org-Babel

#+begin_src elisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (R . t)
       (C . t)
       (python . t)
       (shell . t)
       (haskell . t)
       (latex . t)
       (matlab . t)
       (sql . t)
       (emacs-lisp . t)))
    (setq org-babel-python-command "python3")
#+END_src elisp

** Org-Font-Setup Function

** Org-Setup
#+begin_src elisp
(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")
  (efs/org-font-setup))
#+END_src elisp

** Org Bullets

#+begin_src elisp
    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "●" "○" "●" "○" "●" "○" "●")))
#+end_src

* Org Roam

#+BEGIN_SRC elisp
  (use-package org-roam
  :ensure t
  :demand t  ;; Ensure org-roam is loaded by default
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/Dropbox/RoamNotes")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n I" . org-roam-node-insert-immediate)
         ("C-c n p" . my/org-roam-find-project)
         ("C-c n t" . my/org-roam-capture-task)
         ("C-c n b" . my/org-roam-capture-inbox)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)

(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "Project")
   :templates
   '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
      :unnarrowed t))))

(defun my/org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-create)
                     :templates '(("i" "inbox" plain "* %?"
                                  :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

(defun my/org-roam-capture-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (my/org-roam-filter-by-tag "Project"))
                     :templates '(("p" "project" plain "** TODO %?"
                                   :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                          "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                          ("Tasks"))))))

(defun my/org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
          '(("t" "tasks" entry "%?"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Tasks" today-file nil pos)))))

(add-to-list 'org-after-todo-state-change-hook
             (lambda ()
               (when (equal org-state "DONE")
                 (my/org-roam-copy-todo-to-today))))
#+END_SRC

* Org Agenda

#+BEGIN_SRC elisp

  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/Dropbox/GTD.org"))

(require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
    '(("Archive.org" :maxlevel . 1)
      ("Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

  #+END_SRC

*
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :preface
    (defvar protected-buffers '("*scratch*" "*Messages*"))

    (defun my/protected-buffers ()
      "Protect some buffers from being killed."
      (dolist (buffer protected-buffers)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill))))
    :init (my/protected-buffers))
#+end_src

#+begin_src emacs-lisp
  (use-package imenu)
#+end_src

* Languages Server Protocol

** LSP Configuration

#+begin_src elisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook
  (lsp-mode . lsp-enable-which-key-integration)
  :custom
  (lsp-diagnostics-provider :capf)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-segments '(project file symbols))
  (lsp-lens-enable nil)
  (lsp-disabled-clients '((python-mode . pyls)))
  :init
  (setq lsp-keymap-prefix "C-c l")) ;; Or 'C-l', 's-l'
#+end_src

** LSP Ivy Integration
#+begin_src elisp
(use-package lsp-ivy
  :after lsp-mode)
#+end_src

** LSP UI Configuration
#+begin_src elisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :after lsp-mode
  :custom
  (lsp-ui-doc-show-with-cursor nil)
  :config
  (setq lsp-ui-doc-position 'bottom))
#+end_src

** LSP Treemacs Integration
#+begin_src elisp
(use-package lsp-treemacs
  :after (lsp-mode treemacs))
#+end_src

* Prog languages
** Bash

#+begin_src emacs-lisp
  (use-package sh-script
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

** EPUB

#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :custom (nov-text-width 75))
#+end_src

** Gnuplot

#+begin_src emacs-lisp
  (use-package gnuplot
    :mode "\\.\\(gp\\|gpi\\|plt\\)'"
    :bind (:map gnuplot-mode-map
                ("C-c C-c".  gnuplot-send-buffer-to-gnuplot)))
#+end_src

** JSON

#+begin_src emacs-lisp
  (use-package json-mode
    :delight "J"
    :mode "\\.json\\'")

#+end_src

** Lua

#+begin_src emacs-lisp
      (use-package lua-mode
        :mode "\\.lua\\'")
#+end_src

** Markdown Mode
#+BEGIN_SRC elisp
(use-package markdown-mode
  :mode (("\\`README\\.md\\'" . gfm-mode)
         ("\\.md\\'"          . markdown-mode)
         ("\\.markdown\\'"    . markdown-mode))
  :custom
  (markdown-command "pandoc -f markdown_github+smart")
  (markdown-command-needs-filename t)
  (markdown-enable-math t)
  (markdown-open-command "marked")
  :custom-face
  (markdown-header-face-1 ((t (:inherit markdown-header-face :height 2.0))))
  (markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
  (markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.4))))
  (markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.2))))
  :init
  (setq markdown-command "multimarkdown"))
#+END_SRC

#+begin_src emacs-lisp
  (use-package markdown-mode
    :delight "μ"
    :mode ("\\.\\(md\\|markdown\\)\\'")
    :custom (markdown-command "/usr/bin/pandoc"))
  (use-package markdown-preview-mode
    :commands markdown-preview-mode)
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package python
    :ensure flycheck
    :preface
    (defun python-remove-unused-imports()
      (interactive)
      (if (executable-find "autoflake")
          (progn
            (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                   (shell-quote-argument (buffer-file-name))))
            (revert-buffer t t t))
        (warn "[✗] python-mode: Cannot find autoflake executable.")))
    :bind (:map python-mode-map
                ("M-[" . python-nav-backward-block)
                ("M-]" . python-nav-forward-block)
                ("M-|" . python-remove-unused-imports))
    :custom
    (flycheck-pylintrc "~/.pylintrc")
    (flycheck-python-pylint-executable "/usr/bin/pylint"))
#+end_src

#+begin_src elisp
(use-package lsp-pyright
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp-deferred))))
  (use-package lsp-pyright
    :if (executable-find "pyright")
    ;; To properly load `lsp-pyright', the `require' instruction is important.
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred)))
    :custom
    (lsp-pyright-python-executable-cmd "python3")
    (lsp-pyright-venv-path "~/.cache/pypoetry/virtualenvs/"))
#+end_src


#+begin_src emacs-lisp
  (use-package py-isort
    :hook ((before-save . py-isort-before-save)
           (python-mode . pyvenv-mode)))
#+end_src

#+begin_src emacs-lisp
  (use-package pyvenv
    :after python
    :config (pyvenv-tracking-mode))

  (use-package pyenv-mode
    :hook ((python-mode . pyenv-mode)
           (projectile-switch-project . projectile-pyenv-mode-set))
    :custom (pyenv-mode-set "3.8.5")
    :preface
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name."
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset)))))
#+end_src

#+BEGIN_SRC   elisp
  (use-package python-mode
    :hook
    (python-mode . flycheck-mode)
    (python-mode . company-mode)
    (python-mode . blacken-mode)
    (python-mode . yas-minor-mode)
    :custom
    (python-shell-interpreter "python3")
    :config
    )

  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    :config
    ;; Use IPython for REPL
    (setq elpy-shell-interactive-shell-command "ipython3")
    (setq elpy-shell-interactive-shell-args '("--simple-prompt" "-i")))

  (use-package pyvenv
    :defer t
    :hook (pyvenv-mode . python-mode)
    :config
    (pyvenv-mode 1))

#+END_SRC

** SQL

#+begin_src emacs-lisp
  (use-package sql-mode
    :ensure nil
    :mode "\\.sql\\'")

  (use-package sql-indent
    :delight sql-mode "Σ"
    :hook (sql-mode . sqlind-minor-mode))


  (setq sql-postgres-login-params
        '((user :default "postgres")
          (database :default "analysis")
          (server :default "localhost")
          (port :default 5432)))

#+END_SRC
** HASKELL
#+BEGIN_SRC   haskell
  (use-package haskell-mode
    :defer t)
    (require 'haskell-mode)
    (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
    (setq-default indent-tabs-mode nil)
#+END_SRC

** Yaml
#+BEGIN_SRC   elisp
(use-package  yaml-mode)

  (unless
          (package-installed-p 'yaml-mode)
      (package-refresh-contents)
      (package-install 'yaml-mode))
      (add-to-list 'org-src-lang-modes '("yaml" . yaml))
#+end_src

** Elisp Lint
#+BEGIN_SRC elisp
(use-package elisp-lint)
#+END_SRC



* PDF Tools
#+BEGIN_SRC elisp
  (use-package pdf-tools
    :ensure t
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page))

  (use-package pdf-view
    :ensure nil
    :after pdf-tools
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-view-resize-factor 1.1)
    (pdf-view-use-unicode-ligther nil)
    (pdf-view-use-scaling t))
#+end_src

* AUCTeX
#+BEGIN_SRC elisp
(use-package auctex
    :ensure t
    :defer t
    :hook (LaTeX-mode . (lambda ()
                          (push (list 'output-pdf "Zathura")
                                TeX-view-program-selection)))
          (LaTeX-mode . turn-on-prettify-symbols-mode))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  (put 'LaTeX-narrow-to-environment 'disabled nil)

  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)

#+end_src


#+begin_src emacs-lisp
;;(setq-default TeX-engine 'xetex)
(use-package latex-extra
  :ensure t
  :hook (LaTeX-mode . latex-extra-mode))
#+end_src


#+begin_src emacs-lisp
  (use-package lsp-latex
    :if (executable-find "texlab")
    ;; To properly load `lsp-latex', the `require' instruction is important.
    :hook (LaTeX-mode . (lambda ()
                          (require 'lsp-latex)
                          (lsp-deferred)))
    :custom (lsp-latex-build-on-save t))
(use-package cdlatex
  :hook (LaTeX-mode . cdlatex-mode)
  :config
  (cdlatex-mode 1))
#+END_SRC


#+BEGIN_SRC elisp
(use-package company-math)
(use-package company-auctex
:ensure t
:init
(company-auctex-init))

(use-package latex-preview-pane
  :ensure t)
(use-package magic-latex-buffer
  :ensure t
  :hook (TeX-update-style . magic-latex-buffer))

#+END_SRC

#+BEGIN_SRC elisp
(use-package laas
  :hook (LaTeX-mode . lass-mode))
#+END_SRC

#+BEGIN_SRC elisp
(add-hook 'TeX-mode-hook #'TeX-fold-mode)
(add-hook 'TeX-language-dk-hook
          (lambda () (ispell-change-dictionary "english")))

(setq TeX-parse-self t)
(setq TeX-auto-save t)

(add-hook 'TeX-mode-hook 'flyspell-mode)
(add-hook 'TeX-mode-hook
          (lambda () (TeX-fold-mode 1)))
(add-hook 'TeX-mode-hook 'LaTeX-math-mode)
(add-hook 'TeX-mode-hook 'turn-on-reftex)
#+END_SRC

#+begin_src emacs-lisp
  (use-package reftex
    :ensure nil
    :custom
    (reftex-save-parse-info t)
    (reftex-use-multiple-selection-buffers t))
#+end_src

#+begin_src emacs-lisp
  (use-package bibtex
    :ensure nil
    :preface
    (defun my/bibtex-fill-column ()
      "Ensure that each entry does not exceed 120 characters."
      (setq fill-column 120))
    :hook ((bibtex-mode . lsp-deferred)
           (bibtex-mode . my/bibtex-fill-column)))
#+end_src

* Version Control

#+begin_src elisp
(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
(use-package forge)
  (use-package git-gutter
    :defer 0.3
    :delight
    :config (global-git-gutter-mode))

(defun org-hide-src-block-delimiters()
    (interactive)
    (save-excursion (goto-char (point-max))
        (while (re-search-backward "#\\+BEGIN_SRC\\|#\\+END_SRC" nil t)
           (let ((ov (make-overlay (line-beginning-position)
               (1+ (line-end-position)))))
           (overlay-put ov 'invisible t)))))

(org-hide-src-block-delimiters)

(use-package org-tree-slide
  :custom
  (org-image-actual-width nil))

#+end_src elisp
